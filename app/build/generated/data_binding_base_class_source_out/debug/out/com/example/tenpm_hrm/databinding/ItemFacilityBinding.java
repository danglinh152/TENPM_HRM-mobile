// Generated by view binder compiler. Do not edit!
package com.example.tenpm_hrm.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.tenpm_hrm.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemFacilityBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final RelativeLayout csvcContainerInformation;

  @NonNull
  public final ImageView ivCSVCDelete;

  @NonNull
  public final ImageView ivCSVCDetail;

  @NonNull
  public final TextView tvCSVCID;

  @NonNull
  public final TextView tvCSVCName;

  @NonNull
  public final TextView tvCSVCQuantity;

  @NonNull
  public final TextView tvCSVCStatus;

  private ItemFacilityBinding(@NonNull RelativeLayout rootView,
      @NonNull RelativeLayout csvcContainerInformation, @NonNull ImageView ivCSVCDelete,
      @NonNull ImageView ivCSVCDetail, @NonNull TextView tvCSVCID, @NonNull TextView tvCSVCName,
      @NonNull TextView tvCSVCQuantity, @NonNull TextView tvCSVCStatus) {
    this.rootView = rootView;
    this.csvcContainerInformation = csvcContainerInformation;
    this.ivCSVCDelete = ivCSVCDelete;
    this.ivCSVCDetail = ivCSVCDetail;
    this.tvCSVCID = tvCSVCID;
    this.tvCSVCName = tvCSVCName;
    this.tvCSVCQuantity = tvCSVCQuantity;
    this.tvCSVCStatus = tvCSVCStatus;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemFacilityBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemFacilityBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_facility, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemFacilityBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      RelativeLayout csvcContainerInformation = (RelativeLayout) rootView;

      id = R.id.ivCSVCDelete;
      ImageView ivCSVCDelete = ViewBindings.findChildViewById(rootView, id);
      if (ivCSVCDelete == null) {
        break missingId;
      }

      id = R.id.ivCSVCDetail;
      ImageView ivCSVCDetail = ViewBindings.findChildViewById(rootView, id);
      if (ivCSVCDetail == null) {
        break missingId;
      }

      id = R.id.tvCSVCID;
      TextView tvCSVCID = ViewBindings.findChildViewById(rootView, id);
      if (tvCSVCID == null) {
        break missingId;
      }

      id = R.id.tvCSVCName;
      TextView tvCSVCName = ViewBindings.findChildViewById(rootView, id);
      if (tvCSVCName == null) {
        break missingId;
      }

      id = R.id.tvCSVCQuantity;
      TextView tvCSVCQuantity = ViewBindings.findChildViewById(rootView, id);
      if (tvCSVCQuantity == null) {
        break missingId;
      }

      id = R.id.tvCSVCStatus;
      TextView tvCSVCStatus = ViewBindings.findChildViewById(rootView, id);
      if (tvCSVCStatus == null) {
        break missingId;
      }

      return new ItemFacilityBinding((RelativeLayout) rootView, csvcContainerInformation,
          ivCSVCDelete, ivCSVCDetail, tvCSVCID, tvCSVCName, tvCSVCQuantity, tvCSVCStatus);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
