// Generated by view binder compiler. Do not edit!
package com.example.tenpm_hrm.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.tenpm_hrm.R;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CreateProjectBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button buttonAddProject;

  @NonNull
  public final TextInputLayout inputAddProjectDesc;

  @NonNull
  public final TextInputLayout inputAddProjectID;

  @NonNull
  public final TextInputLayout inputAddProjectName;

  @NonNull
  public final TextInputLayout inputAddProjectParticipant;

  @NonNull
  public final RelativeLayout inputContainer;

  @NonNull
  public final ImageView ivHeader;

  @NonNull
  public final TextView labelAddIdProject;

  @NonNull
  public final TextView labelAddProjectDesc;

  @NonNull
  public final TextView labelAddProjectName;

  @NonNull
  public final TextView labelAddProjectParticipant;

  @NonNull
  public final RelativeLayout linearLayout;

  @NonNull
  public final RelativeLayout rlHeaderContainer;

  @NonNull
  public final TextView tvHeaderDescription;

  @NonNull
  public final TextView tvHeaderTitle;

  @NonNull
  public final TextView tvLabel;

  private CreateProjectBinding(@NonNull RelativeLayout rootView, @NonNull Button buttonAddProject,
      @NonNull TextInputLayout inputAddProjectDesc, @NonNull TextInputLayout inputAddProjectID,
      @NonNull TextInputLayout inputAddProjectName,
      @NonNull TextInputLayout inputAddProjectParticipant, @NonNull RelativeLayout inputContainer,
      @NonNull ImageView ivHeader, @NonNull TextView labelAddIdProject,
      @NonNull TextView labelAddProjectDesc, @NonNull TextView labelAddProjectName,
      @NonNull TextView labelAddProjectParticipant, @NonNull RelativeLayout linearLayout,
      @NonNull RelativeLayout rlHeaderContainer, @NonNull TextView tvHeaderDescription,
      @NonNull TextView tvHeaderTitle, @NonNull TextView tvLabel) {
    this.rootView = rootView;
    this.buttonAddProject = buttonAddProject;
    this.inputAddProjectDesc = inputAddProjectDesc;
    this.inputAddProjectID = inputAddProjectID;
    this.inputAddProjectName = inputAddProjectName;
    this.inputAddProjectParticipant = inputAddProjectParticipant;
    this.inputContainer = inputContainer;
    this.ivHeader = ivHeader;
    this.labelAddIdProject = labelAddIdProject;
    this.labelAddProjectDesc = labelAddProjectDesc;
    this.labelAddProjectName = labelAddProjectName;
    this.labelAddProjectParticipant = labelAddProjectParticipant;
    this.linearLayout = linearLayout;
    this.rlHeaderContainer = rlHeaderContainer;
    this.tvHeaderDescription = tvHeaderDescription;
    this.tvHeaderTitle = tvHeaderTitle;
    this.tvLabel = tvLabel;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CreateProjectBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CreateProjectBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.create_project, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CreateProjectBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonAddProject;
      Button buttonAddProject = ViewBindings.findChildViewById(rootView, id);
      if (buttonAddProject == null) {
        break missingId;
      }

      id = R.id.inputAddProjectDesc;
      TextInputLayout inputAddProjectDesc = ViewBindings.findChildViewById(rootView, id);
      if (inputAddProjectDesc == null) {
        break missingId;
      }

      id = R.id.inputAddProjectID;
      TextInputLayout inputAddProjectID = ViewBindings.findChildViewById(rootView, id);
      if (inputAddProjectID == null) {
        break missingId;
      }

      id = R.id.inputAddProjectName;
      TextInputLayout inputAddProjectName = ViewBindings.findChildViewById(rootView, id);
      if (inputAddProjectName == null) {
        break missingId;
      }

      id = R.id.inputAddProjectParticipant;
      TextInputLayout inputAddProjectParticipant = ViewBindings.findChildViewById(rootView, id);
      if (inputAddProjectParticipant == null) {
        break missingId;
      }

      id = R.id.inputContainer;
      RelativeLayout inputContainer = ViewBindings.findChildViewById(rootView, id);
      if (inputContainer == null) {
        break missingId;
      }

      id = R.id.ivHeader;
      ImageView ivHeader = ViewBindings.findChildViewById(rootView, id);
      if (ivHeader == null) {
        break missingId;
      }

      id = R.id.labelAddIdProject;
      TextView labelAddIdProject = ViewBindings.findChildViewById(rootView, id);
      if (labelAddIdProject == null) {
        break missingId;
      }

      id = R.id.labelAddProjectDesc;
      TextView labelAddProjectDesc = ViewBindings.findChildViewById(rootView, id);
      if (labelAddProjectDesc == null) {
        break missingId;
      }

      id = R.id.labelAddProjectName;
      TextView labelAddProjectName = ViewBindings.findChildViewById(rootView, id);
      if (labelAddProjectName == null) {
        break missingId;
      }

      id = R.id.labelAddProjectParticipant;
      TextView labelAddProjectParticipant = ViewBindings.findChildViewById(rootView, id);
      if (labelAddProjectParticipant == null) {
        break missingId;
      }

      RelativeLayout linearLayout = (RelativeLayout) rootView;

      id = R.id.rlHeaderContainer;
      RelativeLayout rlHeaderContainer = ViewBindings.findChildViewById(rootView, id);
      if (rlHeaderContainer == null) {
        break missingId;
      }

      id = R.id.tvHeaderDescription;
      TextView tvHeaderDescription = ViewBindings.findChildViewById(rootView, id);
      if (tvHeaderDescription == null) {
        break missingId;
      }

      id = R.id.tvHeaderTitle;
      TextView tvHeaderTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvHeaderTitle == null) {
        break missingId;
      }

      id = R.id.tvLabel;
      TextView tvLabel = ViewBindings.findChildViewById(rootView, id);
      if (tvLabel == null) {
        break missingId;
      }

      return new CreateProjectBinding((RelativeLayout) rootView, buttonAddProject,
          inputAddProjectDesc, inputAddProjectID, inputAddProjectName, inputAddProjectParticipant,
          inputContainer, ivHeader, labelAddIdProject, labelAddProjectDesc, labelAddProjectName,
          labelAddProjectParticipant, linearLayout, rlHeaderContainer, tvHeaderDescription,
          tvHeaderTitle, tvLabel);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
