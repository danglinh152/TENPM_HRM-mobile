// Generated by view binder compiler. Do not edit!
package com.example.tenpm_hrm.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.tenpm_hrm.R;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UpdateFacilityBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button buttonUpdateFacility;

  @NonNull
  public final RelativeLayout inputContainer;

  @NonNull
  public final TextInputEditText inputUpdateBuyingDate;

  @NonNull
  public final TextInputLayout inputUpdateBuyingDateLayout;

  @NonNull
  public final TextInputEditText inputUpdateDepartmentID;

  @NonNull
  public final TextInputLayout inputUpdateDepartmentIDLayout;

  @NonNull
  public final TextInputEditText inputUpdateFacilityName;

  @NonNull
  public final TextInputLayout inputUpdateFacilityNameLayout;

  @NonNull
  public final TextInputEditText inputUpdateFacilityQuantity;

  @NonNull
  public final TextInputLayout inputUpdateFacilityQuantityLayout;

  @NonNull
  public final ImageView ivHeader;

  @NonNull
  public final TextView labelUpdateBuyingDateLayout;

  @NonNull
  public final TextView labelUpdateDepartmentIDLayout;

  @NonNull
  public final TextView labelUpdateFacilityName;

  @NonNull
  public final TextView labelUpdateFacilityQuantity;

  @NonNull
  public final RelativeLayout linearLayout;

  @NonNull
  public final RelativeLayout rlHeaderContainer;

  @NonNull
  public final Spinner spinnerFacilityStatus;

  @NonNull
  public final TextView tvHeaderDescription;

  @NonNull
  public final TextView tvHeaderTitle;

  @NonNull
  public final TextView tvLabelUpdateFacility;

  private UpdateFacilityBinding(@NonNull RelativeLayout rootView,
      @NonNull Button buttonUpdateFacility, @NonNull RelativeLayout inputContainer,
      @NonNull TextInputEditText inputUpdateBuyingDate,
      @NonNull TextInputLayout inputUpdateBuyingDateLayout,
      @NonNull TextInputEditText inputUpdateDepartmentID,
      @NonNull TextInputLayout inputUpdateDepartmentIDLayout,
      @NonNull TextInputEditText inputUpdateFacilityName,
      @NonNull TextInputLayout inputUpdateFacilityNameLayout,
      @NonNull TextInputEditText inputUpdateFacilityQuantity,
      @NonNull TextInputLayout inputUpdateFacilityQuantityLayout, @NonNull ImageView ivHeader,
      @NonNull TextView labelUpdateBuyingDateLayout,
      @NonNull TextView labelUpdateDepartmentIDLayout, @NonNull TextView labelUpdateFacilityName,
      @NonNull TextView labelUpdateFacilityQuantity, @NonNull RelativeLayout linearLayout,
      @NonNull RelativeLayout rlHeaderContainer, @NonNull Spinner spinnerFacilityStatus,
      @NonNull TextView tvHeaderDescription, @NonNull TextView tvHeaderTitle,
      @NonNull TextView tvLabelUpdateFacility) {
    this.rootView = rootView;
    this.buttonUpdateFacility = buttonUpdateFacility;
    this.inputContainer = inputContainer;
    this.inputUpdateBuyingDate = inputUpdateBuyingDate;
    this.inputUpdateBuyingDateLayout = inputUpdateBuyingDateLayout;
    this.inputUpdateDepartmentID = inputUpdateDepartmentID;
    this.inputUpdateDepartmentIDLayout = inputUpdateDepartmentIDLayout;
    this.inputUpdateFacilityName = inputUpdateFacilityName;
    this.inputUpdateFacilityNameLayout = inputUpdateFacilityNameLayout;
    this.inputUpdateFacilityQuantity = inputUpdateFacilityQuantity;
    this.inputUpdateFacilityQuantityLayout = inputUpdateFacilityQuantityLayout;
    this.ivHeader = ivHeader;
    this.labelUpdateBuyingDateLayout = labelUpdateBuyingDateLayout;
    this.labelUpdateDepartmentIDLayout = labelUpdateDepartmentIDLayout;
    this.labelUpdateFacilityName = labelUpdateFacilityName;
    this.labelUpdateFacilityQuantity = labelUpdateFacilityQuantity;
    this.linearLayout = linearLayout;
    this.rlHeaderContainer = rlHeaderContainer;
    this.spinnerFacilityStatus = spinnerFacilityStatus;
    this.tvHeaderDescription = tvHeaderDescription;
    this.tvHeaderTitle = tvHeaderTitle;
    this.tvLabelUpdateFacility = tvLabelUpdateFacility;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static UpdateFacilityBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UpdateFacilityBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.update_facility, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UpdateFacilityBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonUpdateFacility;
      Button buttonUpdateFacility = ViewBindings.findChildViewById(rootView, id);
      if (buttonUpdateFacility == null) {
        break missingId;
      }

      id = R.id.inputContainer;
      RelativeLayout inputContainer = ViewBindings.findChildViewById(rootView, id);
      if (inputContainer == null) {
        break missingId;
      }

      id = R.id.inputUpdateBuyingDate;
      TextInputEditText inputUpdateBuyingDate = ViewBindings.findChildViewById(rootView, id);
      if (inputUpdateBuyingDate == null) {
        break missingId;
      }

      id = R.id.inputUpdateBuyingDateLayout;
      TextInputLayout inputUpdateBuyingDateLayout = ViewBindings.findChildViewById(rootView, id);
      if (inputUpdateBuyingDateLayout == null) {
        break missingId;
      }

      id = R.id.inputUpdateDepartmentID;
      TextInputEditText inputUpdateDepartmentID = ViewBindings.findChildViewById(rootView, id);
      if (inputUpdateDepartmentID == null) {
        break missingId;
      }

      id = R.id.inputUpdateDepartmentIDLayout;
      TextInputLayout inputUpdateDepartmentIDLayout = ViewBindings.findChildViewById(rootView, id);
      if (inputUpdateDepartmentIDLayout == null) {
        break missingId;
      }

      id = R.id.inputUpdateFacilityName;
      TextInputEditText inputUpdateFacilityName = ViewBindings.findChildViewById(rootView, id);
      if (inputUpdateFacilityName == null) {
        break missingId;
      }

      id = R.id.inputUpdateFacilityNameLayout;
      TextInputLayout inputUpdateFacilityNameLayout = ViewBindings.findChildViewById(rootView, id);
      if (inputUpdateFacilityNameLayout == null) {
        break missingId;
      }

      id = R.id.inputUpdateFacilityQuantity;
      TextInputEditText inputUpdateFacilityQuantity = ViewBindings.findChildViewById(rootView, id);
      if (inputUpdateFacilityQuantity == null) {
        break missingId;
      }

      id = R.id.inputUpdateFacilityQuantityLayout;
      TextInputLayout inputUpdateFacilityQuantityLayout = ViewBindings.findChildViewById(rootView, id);
      if (inputUpdateFacilityQuantityLayout == null) {
        break missingId;
      }

      id = R.id.ivHeader;
      ImageView ivHeader = ViewBindings.findChildViewById(rootView, id);
      if (ivHeader == null) {
        break missingId;
      }

      id = R.id.labelUpdateBuyingDateLayout;
      TextView labelUpdateBuyingDateLayout = ViewBindings.findChildViewById(rootView, id);
      if (labelUpdateBuyingDateLayout == null) {
        break missingId;
      }

      id = R.id.labelUpdateDepartmentIDLayout;
      TextView labelUpdateDepartmentIDLayout = ViewBindings.findChildViewById(rootView, id);
      if (labelUpdateDepartmentIDLayout == null) {
        break missingId;
      }

      id = R.id.labelUpdateFacilityName;
      TextView labelUpdateFacilityName = ViewBindings.findChildViewById(rootView, id);
      if (labelUpdateFacilityName == null) {
        break missingId;
      }

      id = R.id.labelUpdateFacilityQuantity;
      TextView labelUpdateFacilityQuantity = ViewBindings.findChildViewById(rootView, id);
      if (labelUpdateFacilityQuantity == null) {
        break missingId;
      }

      RelativeLayout linearLayout = (RelativeLayout) rootView;

      id = R.id.rlHeaderContainer;
      RelativeLayout rlHeaderContainer = ViewBindings.findChildViewById(rootView, id);
      if (rlHeaderContainer == null) {
        break missingId;
      }

      id = R.id.spinnerFacilityStatus;
      Spinner spinnerFacilityStatus = ViewBindings.findChildViewById(rootView, id);
      if (spinnerFacilityStatus == null) {
        break missingId;
      }

      id = R.id.tvHeaderDescription;
      TextView tvHeaderDescription = ViewBindings.findChildViewById(rootView, id);
      if (tvHeaderDescription == null) {
        break missingId;
      }

      id = R.id.tvHeaderTitle;
      TextView tvHeaderTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvHeaderTitle == null) {
        break missingId;
      }

      id = R.id.tvLabelUpdateFacility;
      TextView tvLabelUpdateFacility = ViewBindings.findChildViewById(rootView, id);
      if (tvLabelUpdateFacility == null) {
        break missingId;
      }

      return new UpdateFacilityBinding((RelativeLayout) rootView, buttonUpdateFacility,
          inputContainer, inputUpdateBuyingDate, inputUpdateBuyingDateLayout,
          inputUpdateDepartmentID, inputUpdateDepartmentIDLayout, inputUpdateFacilityName,
          inputUpdateFacilityNameLayout, inputUpdateFacilityQuantity,
          inputUpdateFacilityQuantityLayout, ivHeader, labelUpdateBuyingDateLayout,
          labelUpdateDepartmentIDLayout, labelUpdateFacilityName, labelUpdateFacilityQuantity,
          linearLayout, rlHeaderContainer, spinnerFacilityStatus, tvHeaderDescription,
          tvHeaderTitle, tvLabelUpdateFacility);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
